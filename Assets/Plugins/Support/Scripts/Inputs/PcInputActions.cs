//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Vendor/Support/Scripts/Inputs/PcInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Support.Inputs
{
    public partial class @PcInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PcInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PcInputActions"",
    ""maps"": [
        {
            ""name"": ""Control"",
            ""id"": ""4de121a7-2d66-4eda-b529-364201c23f49"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""975ec52a-5eca-4649-aefe-f3580e37ce89"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""f7ed95f8-7adb-49a9-a95d-4a5ef76b6a80"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c6004082-f78e-4597-9e2a-936663b5309f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""c309f7c6-1e87-483d-9778-2cf4e6db52d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""e21c91f5-0050-45aa-9ae7-0c239ddc0dd6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard-WASD"",
                    ""id"": ""30a9559e-f6d4-4849-bb65-8b396c5ddff9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fc8e9596-e9bc-40d0-9338-58aac0d80c10"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9a233f47-d7fc-4245-812d-a568354dd539"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""67be7cc5-44fe-4ced-8ee6-9da5c6e6f281"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""07daa367-5966-4992-a747-c7fe93f183ec"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""31acb6ba-1d9d-4474-8428-07a273c7ba8a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36cf53e3-ee0e-419d-bd87-8d17dda1b805"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""357de6f6-0976-4917-a88a-f16cfb150941"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37b3cecf-3807-43b1-9407-e4746c6dc4cc"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""3c0527e3-3546-42d4-8346-456623bb2f8d"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""3b1aade3-275d-4a46-8e83-421e3fca2c75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""b72df55d-4e59-4d93-8121-2cf57d83b055"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a2a5f62d-0222-4734-aea7-37d0f2619dae"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dddd1ea3-eb28-40e9-b970-ab178d158894"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Control
            m_Control = asset.FindActionMap("Control", throwIfNotFound: true);
            m_Control_Movement = m_Control.FindAction("Movement", throwIfNotFound: true);
            m_Control_Rotation = m_Control.FindAction("Rotation", throwIfNotFound: true);
            m_Control_Jump = m_Control.FindAction("Jump", throwIfNotFound: true);
            m_Control_Crouch = m_Control.FindAction("Crouch", throwIfNotFound: true);
            m_Control_Shift = m_Control.FindAction("Shift", throwIfNotFound: true);
            // Combat
            m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
            m_Combat_Attack = m_Combat.FindAction("Attack", throwIfNotFound: true);
            m_Combat_Aim = m_Combat.FindAction("Aim", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Control
        private readonly InputActionMap m_Control;
        private IControlActions m_ControlActionsCallbackInterface;
        private readonly InputAction m_Control_Movement;
        private readonly InputAction m_Control_Rotation;
        private readonly InputAction m_Control_Jump;
        private readonly InputAction m_Control_Crouch;
        private readonly InputAction m_Control_Shift;
        public struct ControlActions
        {
            private @PcInputActions m_Wrapper;
            public ControlActions(@PcInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Control_Movement;
            public InputAction @Rotation => m_Wrapper.m_Control_Rotation;
            public InputAction @Jump => m_Wrapper.m_Control_Jump;
            public InputAction @Crouch => m_Wrapper.m_Control_Crouch;
            public InputAction @Shift => m_Wrapper.m_Control_Shift;
            public InputActionMap Get() { return m_Wrapper.m_Control; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ControlActions set) { return set.Get(); }
            public void SetCallbacks(IControlActions instance)
            {
                if (m_Wrapper.m_ControlActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnMovement;
                    @Rotation.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnRotation;
                    @Jump.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnJump;
                    @Crouch.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnCrouch;
                    @Crouch.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnCrouch;
                    @Crouch.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnCrouch;
                    @Shift.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnShift;
                    @Shift.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnShift;
                    @Shift.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnShift;
                }
                m_Wrapper.m_ControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Crouch.started += instance.OnCrouch;
                    @Crouch.performed += instance.OnCrouch;
                    @Crouch.canceled += instance.OnCrouch;
                    @Shift.started += instance.OnShift;
                    @Shift.performed += instance.OnShift;
                    @Shift.canceled += instance.OnShift;
                }
            }
        }
        public ControlActions @Control => new ControlActions(this);

        // Combat
        private readonly InputActionMap m_Combat;
        private ICombatActions m_CombatActionsCallbackInterface;
        private readonly InputAction m_Combat_Attack;
        private readonly InputAction m_Combat_Aim;
        public struct CombatActions
        {
            private @PcInputActions m_Wrapper;
            public CombatActions(@PcInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Attack => m_Wrapper.m_Combat_Attack;
            public InputAction @Aim => m_Wrapper.m_Combat_Aim;
            public InputActionMap Get() { return m_Wrapper.m_Combat; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
            public void SetCallbacks(ICombatActions instance)
            {
                if (m_Wrapper.m_CombatActionsCallbackInterface != null)
                {
                    @Attack.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnAttack;
                    @Aim.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnAim;
                    @Aim.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnAim;
                    @Aim.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnAim;
                }
                m_Wrapper.m_CombatActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @Aim.started += instance.OnAim;
                    @Aim.performed += instance.OnAim;
                    @Aim.canceled += instance.OnAim;
                }
            }
        }
        public CombatActions @Combat => new CombatActions(this);
        public interface IControlActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnShift(InputAction.CallbackContext context);
        }
        public interface ICombatActions
        {
            void OnAttack(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
        }
    }
}
